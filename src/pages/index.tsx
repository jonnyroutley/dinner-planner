import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import { api } from "~/utils/api";
import { useState, useEffect } from "react";
import Loading from "./loading";
import type { User } from "@prisma/client";
import { MouseEvent } from "react";

export default function Home() {
  const { data: session } = useSession();

  const [isFirstWeek, setIsFirstWeek] = useState(true);
  const toggleIsFirstWeek = () => {
    setIsFirstWeek(!isFirstWeek);
  };

  const toggleAttendance = async (
    e: MouseEvent,
    dinnerId: string,
    attending: boolean
  ) => {
    e.preventDefault();
    // alert("clicked");
    if (attending) {
      removeAttendance.mutate({ dinnerId });
      // data![key]!.users = data![key]!.users.filter((user) => user.name != username);
    } else {
      addAttendance.mutate({ dinnerId });
    }
  };

  const toggleCooking = async (
    e: MouseEvent,
    dinnerId: string,
    cooking: boolean
  ) => {
    e.preventDefault();
    if (cooking) {
      removeCooking.mutate({ dinnerId });
    } else {
      setCooking.mutate({ dinnerId });
    }
  };

  const dateToString = (date: Date) => {
    // console.log(date)
    let datestr = date.getDate() + "/" + (date.getMonth() + 1);
    return datestr;
  };

  const nameFromId = (userId: string | null) => {
    
    const user = users?.find(el => el.id == userId)
    
    if (user) {
      return user.name!.split(" ")[0]
    }
    return ""
  }

  const { data: users } = api.user.getAll.useQuery();
  console.log(users)
  const { data, isLoading } = api.dinner.getFortnight.useQuery();
  const utils = api.useContext();
  const removeAttendance = api.dinner.removeAttendance.useMutation({
    onSettled() {
      // sync with server
      utils.dinner.getFortnight.invalidate();
    },
  });
  const addAttendance = api.dinner.addAttendance.useMutation({
    onSettled() {
      utils.dinner.getFortnight.invalidate();
    },
  });
  // const { users, isLoading } = api.user.getAll.useQuery();

  const setCooking = api.dinner.setCooking.useMutation({
    onSettled() {
      utils.dinner.getFortnight.invalidate();
    },
  });

  const removeCooking = api.dinner.removeCooking.useMutation({
    onSettled() {
      utils.dinner.getFortnight.invalidate();
    },
  });

  const userAttending = (arr: Array<User>) => {
    return arr.some(function (el: User) {
      return el.name === session!.user.name;
    });
  };

  const userCooking = (cookUserId: string | null) => {
    return cookUserId === session!.user.id;
  };

  if (isLoading) return <Loading />;
  if (!session) {
    return (
      <div className="flex h-screen w-screen flex-col items-center justify-center">
        <button
          onClick={() => signIn()}
          className="text-2xl hover:text-zinc-600"
          disabled={addAttendance.isLoading || removeAttendance.isLoading}
          >
          Sign In
        </button>
      </div>
    );
  }

  if (!data) {
    return <div>Something went wrong...</div>;
  }


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col gap-4 bg-zinc-100 p-2 font-mono md:px-8 md:py-4">
        <div className="flex flex-row items-end justify-between">
          <h1 className="text-5xl font-bold text-zinc-800">In For Din?</h1>
          <div className="flex flex-row items-center gap-4">
            <div>
              {isFirstWeek ? (
                <button
                  className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400"
                  onClick={toggleIsFirstWeek}
                >
                  Week 1
                </button>
              ) : (
                <button
                  className="rounded-lg bg-orange-200 p-4 shadow-md hover:bg-orange-400 "
                  onClick={toggleIsFirstWeek}
                >
                  Week 2
                </button>
              )}
            </div>
            {/* <Link href="/edit">
              <div className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400">
                Edit
              </div>
            </Link> */}

            <div className="flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xl font-bold shadow-md">
              J
            </div>
          </div>
        </div>
        <div className="grow rounded-xl bg-zinc-800 p-4 shadow-lg md:p-8">
          <div className="grid grid-cols-7 gap-[2px] md:gap-4">
            {data.map((dinner, key) => (
              <div
                key={key}
                className="rounded-sm bg-zinc-100 p-2 md:rounded-lg"
              >
                <h1 className="text-center text-4xl font-bold text-orange-600 ">
                  {dinner.name.slice(0, 1)}
                </h1>
                <p className="text-center text-xs text-zinc-600">
                  {dateToString(dinner.date)}
                </p>
                <div className="flex h-72 flex-col justify-between gap-2">
                  <div className="no-scrollbar mt-2 flex max-h-full flex-row flex-wrap items-center justify-center gap-2 overflow-y-scroll py-2 shadow-inner">
                    {dinner.users.map((user) => (
                      <div
                        key={user.id}
                        className="flex h-10 w-10 items-center justify-center rounded-full bg-zinc-800 text-xs font-semibold text-zinc-100 shadow-md md:h-14 md:w-14"
                      >
                        {user.name != null && user.name.split(" ")[0]}
                      </div>
                    ))}
                  </div>
                  <div className="flex flex-row justify-between">
                    <p className="text-center text-orange-600">
                      {dinner.users.length}
                    </p>
                    <button
                      type="button"
                      disabled={
                        addAttendance.isLoading || removeAttendance.isLoading
                      }
                      onClick={(e) =>
                        toggleAttendance(
                          e,
                          dinner.id,
                          userAttending(dinner.users)
                        )
                      }
                      className="h-6 w-6 rounded-md bg-zinc-400 hover:bg-zinc-600"
                    >
                      {userAttending(dinner.users) ? "-" : "+"}
                    </button>
                  </div>
                </div>
              </div>
            ))}
            {data.map((dinner) => (
              <div
                key={dinner.id}
                className="m-auto text-lg font-semibold text-zinc-100"
              >
                {dinner.time}
              </div>
            ))}
            {data.map((dinner, key) => (
              <div className="flex flex-col items-center " key={key}>
                <div className="mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xs font-semibold text-zinc-100">
                  {nameFromId(dinner.cookUserId)}
                </div>
                <button
                  type="button"
                  className="-my-4 h-6 w-6 rounded-md bg-zinc-400 hover:bg-zinc-600"
                  onClick={(e) =>
                    toggleCooking(e, dinner.id, userCooking(dinner.cookUserId))
                  }
                >
                  {userCooking(dinner.cookUserId) ? "-" : "+"}
                </button>
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
