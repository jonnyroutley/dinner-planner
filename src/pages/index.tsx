import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import { useState, useEffect } from "react";
import Loading from "./loading";
import type { User } from "@prisma/client";
import { MouseEvent } from "react";

export default function Home() {
  const days = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  // get data from API
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // const [editing, setEditing] = useState(false);

  // const toggleEditing = () => {
  //   setEditing(!editing);
  // };
  const username = "Jonny";

  const { data: session } = useSession();

  console.log(session)
  
  const [isFirstWeek, setIsFirstWeek] = useState(true);
  const toggleIsFirstWeek = () => {
    setIsFirstWeek(!isFirstWeek);
  };

  const userAttending = (arr: Array<User>, name: String) => {
    return arr.some(function (el: User) {
      return el.name === name;
    });
  };

  const toggleAttendance = (e: MouseEvent) => {
    e.preventDefault();
    alert("clicked");
  };

  const dateToString = (date: Date) => {
    // console.log(date)
    let datestr = date.getDate() + "/" + (date.getMonth() + 1);
    return datestr;
  };
  
  const { data, isLoading } = api.dinner.getFortnight.useQuery();
  // const { users, isLoading } = api.user.getAll.useQuery();
  
  if (!session) {
    return (
      <div className="flex flex-col h-screen w-screen items-center justify-center">
        <button onClick={() => signIn()} className="hover:text-zinc-600 text-2xl">Sign In</button>
      </div>
    );
  }
  
  if (isLoading) return <Loading />;
  if (!data) {
    return <div>Something went wrong...</div>;
  }
  console.log(data);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col gap-4 bg-zinc-100 p-2 font-mono md:px-8 md:py-4">
        <div className="flex flex-row items-end justify-between">
          <h1 className="text-5xl font-bold text-zinc-800">In For Din?</h1>
          <div className="flex flex-row items-center gap-4">
            <div>
              {isFirstWeek ? (
                <button
                  className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400"
                  onClick={toggleIsFirstWeek}
                >
                  Week 1
                </button>
              ) : (
                <button
                  className="rounded-lg bg-orange-200 p-4 shadow-md hover:bg-orange-400 "
                  onClick={toggleIsFirstWeek}
                >
                  Week 2
                </button>
              )}
            </div>
            <Link href="/edit">
              <div className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400">
                Edit
              </div>
            </Link>

            <div className="flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xl font-bold shadow-md">
              J
            </div>
          </div>
        </div>
        <div className="grow rounded-xl bg-zinc-800 p-4 shadow-lg md:p-8">
          <div className="grid grid-cols-7 gap-[2px] md:gap-4">
            {data.map((dinner, key) => (
              <div className="rounded-sm bg-zinc-100 p-2 md:rounded-lg">
                <h1 className="text-center text-4xl font-bold text-orange-600 ">
                  {dinner.name.slice(0, 1)}
                </h1>
                <p className="text-center text-xs text-zinc-600">
                  {dateToString(dinner.date)}
                </p>
                <div className="flex h-72 flex-col justify-between gap-2">
                  <div className="no-scrollbar mt-2 flex max-h-full flex-row flex-wrap items-center justify-center gap-2 overflow-y-scroll py-2 shadow-inner">
                    {dinner.users.map((user) => (
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-zinc-800 text-xs font-semibold text-zinc-100 shadow-md md:h-14 md:w-14">
                        {user.name}
                      </div>
                    ))}
                  </div>
                  <div className="flex flex-row justify-between">
                    <p className="text-center text-orange-600">
                      {dinner.users.length}
                    </p>
                    <button
                      type="button"
                      onClick={(e) => toggleAttendance(e)}
                      className="h-6 w-6 rounded-md bg-zinc-400 hover:bg-zinc-600"
                    >
                      {userAttending(dinner.users, username) ? "-" : "+"}
                    </button>
                  </div>
                </div>
              </div>
            ))}
            {data.map((dinner) => (
              <div className="m-auto text-lg font-semibold text-zinc-100">
                {dinner.time}
              </div>
            ))}

            {/* {dinner.time.map((time) => (
            ))} */}
            {/* {cooks.map((cook) => (
              <div className="m-auto flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xs font-semibold text-zinc-100">
                {cook}
              </div>
            ))} */}
          </div>
        </div>
      </main>
    </>
  );
}
