import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import { useState, useEffect } from "react";

export default function Home() {
  // interface Day {
  //   [key: string]: string
  // }
  // const days: Day = {
  //   Monday: "James",
  //   Tuesday: "Jess",
  //   Wednesday: "Jonny",
  //   Thursday: "Mum",
  //   Friday: "Mum",
  //   Saturday: "Jess",
  //   Sunday: "James",
  // }

  const days = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];
  const allPeople = [
    ["Dad", "James"],
    ["Dad", "James", "Jess"],
    [
      "Dad",
      "James",
      "Jess",
      "Jonny",
      "Alina",
      "Mum",
      "Anna",
      "Rosie",
      "Jake",
      "Wei Han",
    ],
    ["Dad", "James", "Jess", "Jonny", "Alina"],
    ["Dad", "James", "Jess", "Jonny", "Alina", "Mum", "Anna"],
    ["Dad"],
    ["Dad", "James", "Jess", "Jonny"],
  ];

  const cooks = ["Mum", "Jonny", "Jess", "Mum", "Jonny", "Jess", "Mum"];

  const times = ["19:00", "18:00", "18:30", "19:00", "20:00", "19:30", "19:00"];

  const user = "Jonny";

  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // const [editing, setEditing] = useState(false);

  // const toggleEditing = () => {
  //   setEditing(!editing);
  // };

  const [isFirstWeek, setIsFirstWeek] = useState(true);
  const toggleIsFirstWeek = () => {
    setIsFirstWeek(!isFirstWeek);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col gap-4 bg-zinc-100 p-2 font-mono md:px-8 md:py-4">
        <div className="flex flex-row items-end justify-between">
          <h1 className="text-5xl font-bold text-zinc-800">Dinner Plan</h1>
          <div className="flex flex-row items-center gap-4">
            <div>
              {isFirstWeek ? (
                <button
                  className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400"
                  onClick={toggleIsFirstWeek}
                >
                  Week 1
                </button>
              ) : (
                <button
                  className="rounded-lg bg-orange-200 p-4 shadow-md hover:bg-orange-400 "
                  onClick={toggleIsFirstWeek}
                >
                  Week 2
                </button>
              )}
            </div>
            <Link href="/edit">
              <div className="rounded-lg bg-zinc-200 p-4 shadow-md hover:bg-zinc-400">Edit</div>
            </Link>

            <div className="flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xl font-bold shadow-md">
              J
            </div>
          </div>
        </div>
        <div className="grow rounded-xl bg-zinc-800 p-4 shadow-lg md:p-8">
          <div className="grid grid-cols-7 gap-[2px] md:gap-4">
            {days.map((day, key) => (
              <div className="rounded-sm bg-zinc-100 p-2 md:rounded-lg">
                <h1 className="text-center text-4xl font-bold text-orange-600 ">
                  {day.slice(0, 1)}
                </h1>
                <p className="text-center text-xs text-zinc-600">
                  {23 + key}/07
                </p>
                <div className="flex h-72 flex-col justify-between gap-2">
                  <div className="no-scrollbar mt-2 flex max-h-full flex-row flex-wrap items-center justify-center gap-2 overflow-y-scroll py-2 shadow-inner">
                    {allPeople[key].map((person: string) => (
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-zinc-800 text-xs font-semibold text-zinc-100 shadow-md md:h-14 md:w-14">
                        {person}
                      </div>
                    ))}
                  </div>
                  <div className="">
                    <p className="text-center text-orange-600">
                      {allPeople[key].length}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {times.map((time) => (
              <div className="m-auto text-lg font-semibold text-zinc-100">
                {time}
              </div>
            ))}
            {cooks.map((cook) => (
              <div className="m-auto flex h-14 w-14 items-center justify-center rounded-full bg-orange-600 text-xs font-semibold text-zinc-100">
                {cook}
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
